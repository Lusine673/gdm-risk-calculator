import streamlit as st
import numpy as np
import pandas as pd

st.set_page_config(page_title="–ú–æ–¥–µ–ª—å —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ì–°–î", page_icon="üß™", layout="centered")

# ====== –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã LASSO‚Äë–º–æ–¥–µ–ª–∏ ======
BETA0 = 0.0
COEFFS = {
    "Tyrosine": 0.1279647860222218,
    "MH3": 0.8913890705856571,             # 3‚Äë–º–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω
    "Phosphoethanolamine": -0.8390359958954429,
    "Phosphoserine": -1.1553144548078098
}
THRESH = 0.382  # –ø–æ—Ä–æ–≥ –Æ–¥–µ–Ω–∞ (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è ¬´–≤—ã—Å–æ–∫–∏–π/–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫¬ª)
FEATURES = list(COEFFS.keys())

# ====== TRAIN‚Äë–¥–∞–Ω–Ω—ã–µ (–º–º–æ–ª—å/–º–æ–ª—å) –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ ======
TRAIN_RAW = {
    "Tyrosine": [45.31, 23.43, 15.03, 20.80, 19.32, 9.58, 12.33, 10.53, 10.17, 14.52],
    "MH3": [46.08, 35.35, 39.78, 15.54, 36.53, 11.93, 10.46, 15.63, 16.70, 11.75],
    "Phosphoethanolamine": [1.08, 0.55, 1.26, 1.09, 0.69, 2.93, 1.91, 1.91, 1.88, 2.20],
    "Phosphoserine": [1.68, 2.12, 0.67, 0.53, 0.35, 8.00, 3.78, 3.59, 1.80, 2.52]
}

# ====== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: log10 ‚Üí Pareto ((x ‚àí mean_log10)/sqrt(sd_log10)) ======
MEAN_LOG, SD_LOG = {}, {}
for k, arr in TRAIN_RAW.items():
    x = np.array(arr, dtype=float)
    xlog = np.log10(x)
    MEAN_LOG[k] = float(np.mean(xlog))
    SD_LOG[k] = float(np.std(xlog, ddof=1))  # sample SD

def normalize_raw_df(df_raw: pd.DataFrame) -> pd.DataFrame:
    """–°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–º–æ–ª—å/–º–æ–ª—å) ‚Üí log10 ‚Üí Pareto —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ train."""
    z = pd.DataFrame(index=df_raw.index)
    for k in FEATURES:
        if k not in df_raw.columns:
            raise ValueError(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞: {k}")
        v = df_raw[k].astype(float)
        if (v <= 0).any():
            raise ValueError(f"{k}: –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0 (–¥–ª—è log10)")
        xlog = np.log10(v)
        denom = np.sqrt(SD_LOG[k]) if SD_LOG[k] > 0 else 1.0
        z[k] = (xlog - MEAN_LOG[k]) / denom
    return z

def predict_proba_from_norm(df_norm: pd.DataFrame) -> np.ndarray:
    X = df_norm[FEATURES].astype(float).values
    beta = np.array([COEFFS[f] for f in FEATURES])
    logit = BETA0 + X @ beta
    return 1 / (1 + np.exp(-logit))

def parse_num(s: str) -> float | None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float –∏–ª–∏ None."""
    if s is None: 
        return None
    try:
        return float(str(s).replace(",", "."))
    except:
        return None

# ====== –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ —Ü–µ–Ω—Ç—Ä—É) ======
st.markdown(
    "<h3 style='text-align:center'>–ú–æ–¥–µ–ª—å —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–µ—Ä–≤—ã–π —Ç—Ä–∏–º–µ—Å—Ç—Ä –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏) –≥–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–Ω–æ–≥–æ –¥–∏–∞–±–µ—Ç–∞</h3>",
    unsafe_allow_html=True
)

st.write("")  # –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø

# ====== –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π (—Å—ã—Ä—ã–µ, –º–º–æ–ª—å/–º–æ–ª—å) ======
st.markdown("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞):")

col1, col2 = st.columns(2)
with col1:
    tyrosine_str = st.text_input("–¢–∏—Ä–æ–∑–∏–Ω", value="")
    pe_str = st.text_input("–§–æ—Å—Ñ–æ—ç—Ç–∞–Ω–æ–ª–∞–º–∏–Ω", value="")
with col2:
    mh3_str = 
