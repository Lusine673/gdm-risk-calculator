import streamlit as st
import numpy as np
import pandas as pd

st.set_page_config(page_title="–ú–æ–¥–µ–ª—å —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ì–°–î", page_icon="üß™", layout="centered")

# ---------- –°—Ç–∏–ª–∏ ----------
st.markdown("""
<style>
:root{
  --primary:#0ea5a2;           
  --ok:#1b5e20;                
  --okbg:#e8f5e9;              
  --warn:#b71c1c;              
  --warnbg:#ffebee;            
  --card:#ffffff;              
  --border:#e9eef2;            
}
.block-container{padding-top:2rem;padding-bottom:2rem;}
h3{font-weight:800;letter-spacing:.2px;margin-bottom:.8rem;}

.card{
  background:var(--card);
  border:1px solid var(--border);
  border-radius:14px;
  padding:16px 18px;
  box-shadow:0 2px 10px rgba(0,0,0,.04);
}

div.stButton > button{
  background:linear-gradient(90deg,var(--primary),#14b8a6);
  color:#fff;border:0;border-radius:10px;padding:.65rem 1.05rem;font-weight:600;
}
div.stButton > button:hover{filter:brightness(1.05);}

.risk-high{
  background:var(--warnbg);
  color:var(--warn);
  padding:14px;border-radius:12px;
  text-align:center;font-size:20px;font-weight:800;
}
.risk-low{
  background:var(--okbg);
  color:var(--ok);
  padding:14px;border-radius:12px;
  text-align:center;font-size:20px;font-weight:800;
}
.hr{height:1px;background:#edf2f7;margin:1.25rem 0;}

#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
header {visibility: hidden;}
[data-testid="stToolbar"] {visibility: hidden !important;}
</style>
""", unsafe_allow_html=True)

# =====================================================
# NEW: –†–∞–∑–¥–µ–ª 1 ‚Äî –∫–ª–∏–Ω–∏–∫–æ‚Äë–∞–Ω–∞–º–Ω–µ—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å (BMI + fam_dm)
# =====================================================
BASE_COEF = {
    "beta0": -2.8830,
    "bmi":   0.1043,
    "fam_dm": 0.8860  # 0/1: –Ω–µ—Ç/–¥–∞ —Å–µ–º–µ–π–Ω–æ–π –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –°–î —É —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏
}
# –ü–æ—Ä–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–¥–≤—É—Ö–ø–æ—Ä–æ–≥–æ–≤–∞—è, –∏–∑ –≤–∞—à–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
TLOW  = 0.388  # rule-out (Se‚âà0.90)
THIGH = 0.607  # rule-in  (Sp‚âà0.80)

def logistic(z: float) -> float:
    return 1.0 / (1.0 + np.exp(-z))

def base_risk(bmi: float, fam_dm_01: int) -> float:
    b = BASE_COEF
    z = b["beta0"] + b["bmi"]*bmi + b["fam_dm"]*fam_dm_01
    return logistic(z)

def base_category(p: float, tlow=TLOW, thigh=THIGH) -> str:
    if p < tlow:
        return "–ù–∏–∑–∫–∏–π"
    elif p < thigh:
        return "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π"
    else:
        return "–í—ã—Å–æ–∫–∏–π"

def combine_categories(cat_base: str, cat_meta: str) -> str:
    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è: ¬´—Ö—É–∂–µ –∏–∑ –¥–≤—É—Ö¬ª
    order = {"–ù–∏–∑–∫–∏–π": 0, "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π": 1, "–í—ã—Å–æ–∫–∏–π": 2}
    # –ï—Å–ª–∏ –º–µ—Ç–∞–±–æ–ª–æ–º–∏–∫–∞ –±–∏–Ω–∞—Ä–Ω–∞—è (¬´–ù–∏–∑–∫–∏–π/–í—ã—Å–æ–∫–∏–π¬ª), –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    return max(cat_base, cat_meta, key=lambda x: order.get(x, 1))

# =====================================================
# –†–∞–∑–¥–µ–ª 2 ‚Äî –º–µ—Ç–∞–±–æ–ª–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
# =====================================================

# ---------- –ú–æ–¥–µ–ª—å (–º–µ—Ç–∞–±–æ–ª–æ–º–∏–∫–∞) ----------
BETA0 = 0.0
COEFFS = {
    "Tyrosine": 2.33,
    "AlphaAminoadipicAcid": 0.96,
    "MH3": 1.13,
    "Phosphoethanolamine": -2.89,
    "Phosphoserine": -2.48
}
META_THRESH = 0.1   # –ü–æ—Ä–æ–≥ –º–µ—Ç–∞–±–æ–ª–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 100%, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å 80%)
FEATURES = list(COEFFS.keys())

# ---------- –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä, –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
TRAIN_RAW = {
    "Tyrosine": [
        45.31, 23.43, 15.03, 20.80, 19.32,
        9.58, 12.33, 10.53, 10.17, 14.52
    ],
    "AlphaAminoadipicAcid": [
        0.95, 1.12, 1.02, 1.08, 1.00,
        2.40, 2.20, 2.50, 2.10, 2.35
    ],
    "MH3": [
        46.08, 35.35, 39.78, 15.54, 36.53,
        11.93, 10.46, 15.63, 16.70, 11.75
    ],
    "Phosphoethanolamine": [
        1.08, 0.55, 1.26, 1.09, 0.69,
        2.93, 1.91, 1.91, 1.88, 2.20
    ],
    "Phosphoserine": [
        1.68, 2.12, 0.67, 0.53, 0.35,
        8.00, 3.78, 3.59, 1.80, 2.52
    ]
}

# ---------- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ (Log10 + Pareto)
MEAN_LOG, SD_LOG = {}, {}
for k, arr in TRAIN_RAW.items():
    x = np.array(arr, dtype=float)
    xlog = np.log10(x)
    MEAN_LOG[k] = float(np.mean(xlog))
    SD_LOG[k]  = float(np.std(xlog, ddof=1))  # sample SD

def normalize_raw_df(df_raw: pd.DataFrame) -> pd.DataFrame:
    z = pd.DataFrame(index=df_raw.index)
    for k in FEATURES:
        v = df_raw[k].astype(float)
        if (v <= 0).any():
            raise ValueError(f"{k}: –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0 (–¥–ª—è log10)")
        xlog = np.log10(v)
        denom = np.sqrt(SD_LOG[k]) if SD_LOG[k] > 0 else 1.0
        z[k] = (xlog - MEAN_LOG[k]) / denom
    return z

def predict_proba_from_norm(df_norm: pd.DataFrame) -> np.ndarray:
    X = df_norm[FEATURES].astype(float).values
    beta = np.array([COEFFS[f] for f in FEATURES])
    logit = BETA0 + X @ beta
    return 1 / (1 + np.exp(-logit))

def parse_num(s):
    try:
        return float(str(s).replace(",", "."))
    except:
        return None

# ---------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ----------
st.markdown(
    "<h3 style='text-align:center'>"
    "–ú–æ–¥–µ–ª—å —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞<br/>"
    "(–ø–µ—Ä–≤—ã–π —Ç—Ä–∏–º–µ—Å—Ç—Ä –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏)<br/>"
    "–≥–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–Ω–æ–≥–æ –¥–∏–∞–±–µ—Ç–∞"
    "</h3>",
    unsafe_allow_html=True
)

# =====================================================
# NEW: –≤–∫–ª–∞–¥–∫–∏ ‚Äî –†–∞–∑–¥–µ–ª 1, –†–∞–∑–¥–µ–ª 2, –ò—Ç–æ–≥
# =====================================================
tab1, tab2, tab3 = st.tabs(["–†–∞–∑–¥–µ–ª 1. –ö–ª–∏–Ω–∏–∫–æ‚Äë–∞–Ω–∞–º–Ω–µ—Å—Ç–∏—á–µ—Å–∫–∏–π", "–†–∞–∑–¥–µ–ª 2. –ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π", "–ò—Ç–æ–≥"])

with tab1:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏–Ω–∏–∫–æ‚Äë–∞–Ω–∞–º–Ω–µ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:")

    c1, c2 = st.columns(2)
    with c1:
        bmi = st.number_input("–ò–ú–¢ (–∫–≥/–º¬≤)", min_value=14.0, max_value=60.0, value=27.0, step=0.1, format="%.1f")
    with c2:
        fam_dm_label = st.radio("–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç —É —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏", ["–ù–µ—Ç", "–î–∞"], horizontal=True)
        fam_dm_01 = 1 if fam_dm_label == "–î–∞" else 0

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫", key="btn_base"):
        p_base = float(base_risk(bmi, fam_dm_01))
        cat_base = base_category(p_base)
        st.session_state["base_p"] = p_base
        st.session_state["base_cat"] = cat_base

        if cat_base == "–í—ã—Å–æ–∫–∏–π":
            st.markdown(f"<div class='risk-high'>–í—ã—Å–æ–∫–∏–π –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ ({p_base*100:.1f}%)</div>", unsafe_allow_html=True)
        elif cat_base == "–ù–∏–∑–∫–∏–π":
            st.markdown(f"<div class='risk-low'>–ù–∏–∑–∫–∏–π –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ ({p_base*100:.1f}%)</div>", unsafe_allow_html=True)
        else:
            st.info(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ ({p_base*100:.1f}%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–æ—á–∏ –Ω–∞ –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–∞.")

    st.markdown("</div>", unsafe_allow_html=True)

with tab2:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞):")

    col1, col2 = st.columns(2)
    with col1:
        tyrosine_str  = st.text_input("–¢–∏—Ä–æ–∑–∏–Ω", value="")
        alphaaaa_str  = st.text_input("Œ±‚Äë–ê–º–∏–Ω–æ–∞–¥–∏–ø–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", value="")
        pe_str        = st.text_input("–§–æ—Å—Ñ–æ—ç—Ç–∞–Ω–æ–ª–∞–º–∏–Ω", value="")
    with col2:
        mh3_str       = st.text_input("3‚Äë–ú–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω (MH3)", value="")
        ps_str        = st.text_input("–§–æ—Å—Ñ–æ—Å–µ—Ä–∏–Ω", value="")

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Ä–∏—Å–∫", key="btn_meta"):
        tyrosine = parse_num(tyrosine_str)
        alphaaaa = parse_num(alphaaaa_str)
        mh3      = parse_num(mh3_str)
        pe       = parse_num(pe_str)
        ps       = parse_num(ps_str)

        errors = []
        for name, val in [("–¢–∏—Ä–æ–∑–∏–Ω", tyrosine),
                          ("Œ±‚Äë–ê–º–∏–Ω–æ–∞–¥–∏–ø–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", alphaaaa),
                          ("3‚Äë–º–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω (MH3)", mh3),
                          ("–§–æ—Å—Ñ–æ—ç—Ç–∞–Ω–æ–ª–∞–º–∏–Ω", pe),
                          ("–§–æ—Å—Ñ–æ—Å–µ—Ä–∏–Ω", ps)]:
            if val is None:
                errors.append(f"{name}: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ —Ç–æ—á–∫–∞).")
            elif val <= 0:
                errors.append(f"{name}: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0.")

        if errors:
            for e in errors:
                st.error(e)
        else:
            df_raw = pd.DataFrame([{
                "Tyrosine": tyrosine,
                "AlphaAminoadipicAcid": alphaaaa,
                "MH3": mh3,
                "Phosphoethanolamine": pe,
                "Phosphoserine": ps
            }])
            try:
                df_norm = normalize_raw_df(df_raw)
                p_meta = float(predict_proba_from_norm(df_norm)[0])
                st.session_state["meta_p"] = p_meta
                # –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –≤–∞—à–µ–º—É –ø–æ—Ä–æ–≥—É 0.1
                cat_meta = "–í—ã—Å–æ–∫–∏–π" if p_meta >= META_THRESH else "–ù–∏–∑–∫–∏–π"
                st.session_state["meta_cat"] = cat_meta

                if cat_meta == "–í—ã—Å–æ–∫–∏–π":
                    st.markdown(f"<div class='risk-high'>–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ –º–µ—Ç–∞–±–æ–ª–æ–º–∏–∫–µ ({p_meta*100:.1f}%)</div>", unsafe_allow_html=True)
                else:
                    st.markdown(f"<div class='risk-low'>–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø–æ –º–µ—Ç–∞–±–æ–ª–æ–º–∏–∫–µ ({p_meta*100:.1f}%)</div>", unsafe_allow_html=True)
            except Exception as ex:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {ex}")

    st.markdown("</div>", unsafe_allow_html=True)

with tab3:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.subheader("–ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    p_base   = st.session_state.get("base_p")
    cat_base = st.session_state.get("base_cat")
    p_meta   = st.session_state.get("meta_p")
    cat_meta = st.session_state.get("meta_cat")

    if (p_base is None) and (p_meta is None):
        st.caption("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –±–∞–∑–æ–≤—ã–π –∏/–∏–ª–∏ –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Ä–∏—Å–∫.")
    elif (p_base is not None) and (p_meta is None):
        st.write(f"–ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫: {p_base*100:.1f}% ‚Üí {cat_base}")
        st.info("–î–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ/–≤—ã—Å–æ–∫–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ —Ä–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —à–∞–≥.")
    elif (p_base is None) and (p_meta is not None):
        st.write(f"–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π —Ä–∏—Å–∫: {p_meta*100:.1f}% ‚Üí {cat_meta}")
    else:
        final_cat = combine_categories(cat_base, cat_meta)
        st.write(f"–ë–∞–∑–æ–≤—ã–π: {p_base*100:.1f}% ‚Üí {cat_base}")
        st.write(f"–ú–µ—Ç–∞–±–æ–ª–æ–º–∏–∫–∞: {p_meta*100:.1f}% ‚Üí {cat_meta}")
        st.success(f"–ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è): {final_cat}")

    st.markdown("</div>", unsafe_allow_html=True)

st.markdown("<div class='hr'></div>", unsafe_allow_html=True)

# ---------- –î–∏—Å–∫–ª–µ–π–º–µ—Ä ----------
with st.expander("–î–∏—Å–∫–ª–µ–π–º–µ—Ä"):
    st.markdown("""
–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∏–∑–¥–µ–ª–∏–µ–º.

–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å (—Å—Ç—É–ø–µ–Ω—å 1): –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ –ò–ú–¢ –∏ —Å–µ–º–µ–π–Ω–æ–π –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –°–î (Œ≤‚ÇÄ = ‚àí2.8830; Œ≤–ò–ú–¢ = 0.1043; Œ≤–°–î = 0.8860).
–ü–æ—Ä–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: rule‚Äëout Tlow = 0.388 (Se‚âà0.90), rule‚Äëin Thigh = 0.607 (Sp‚âà0.80).

–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å (—Å—Ç—É–ø–µ–Ω—å 2): LASSO‚Äë–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ 5 –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞–º (C=10), –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ log10 ‚Üí Pareto; –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ—Ä–æ–≥ 0.10
(—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 100%, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å 80% –≤ LOO‚Äë–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∏–ª–æ—Ç–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ n=10). –ù—É–∂–Ω–∞ –≤–Ω–µ—à–Ω—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—è.
    """)
