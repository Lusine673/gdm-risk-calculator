import streamlit as st
import numpy as np
import pandas as pd

st.set_page_config(page_title="–ú–æ–¥–µ–ª—å —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ì–°–î", page_icon="üß™", layout="centered")

# ===== –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã LASSO‚Äë–º–æ–¥–µ–ª–∏ =====
BETA0 = 0.0
COEFFS = {
    "Tyrosine": 0.1279647860222218,
    "MH3": 0.8913890705856571,             # 3-–º–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω
    "Phosphoethanolamine": -0.8390359958954429,
    "Phosphoserine": -1.1553144548078098
}
THRESH = 0.382  # –ø–æ—Ä–æ–≥ –Æ–¥–µ–Ω–∞
FEATURES = list(COEFFS.keys())

# ===== TRAIN-–¥–∞–Ω–Ω—ã–µ (–º–º–æ–ª—å/–º–æ–ª—å) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ =====
TRAIN_RAW = {
    "Tyrosine": [45.31, 23.43, 15.03, 20.80, 19.32, 9.58, 12.33, 10.53, 10.17, 14.52],
    "MH3": [46.08, 35.35, 39.78, 15.54, 36.53, 11.93, 10.46, 15.63, 16.70, 11.75],
    "Phosphoethanolamine": [1.08, 0.55, 1.26, 1.09, 0.69, 2.93, 1.91, 1.91, 1.88, 2.20],
    "Phosphoserine": [1.68, 2.12, 0.67, 0.53, 0.35, 8.00, 3.78, 3.59, 1.80, 2.52]
}

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: log10 -> Pareto ((x - mean_log10)/sqrt(sd_log10)) =====
MEAN_LOG, SD_LOG = {}, {}
for k, arr in TRAIN_RAW.items():
    x = np.array(arr, dtype=float)
    xlog = np.log10(x)
    MEAN_LOG[k] = float(np.mean(xlog))
    SD_LOG[k] = float(np.std(xlog, ddof=1))  # sample SD

def normalize_raw_df(df_raw: pd.DataFrame) -> pd.DataFrame:
    """–°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–º–æ–ª—å/–º–æ–ª—å) -> log10 -> Pareto —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ train."""
    z = pd.DataFrame(index=df_raw.index)
    for k in FEATURES:
        if k not in df_raw.columns:
            raise ValueError(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞: {k}")
        v = df_raw[k].astype(float)
        if (v <= 0).any():
            raise ValueError(f"{k}: –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0 (–¥–ª—è log10)")
        xlog = np.log10(v)
        denom = np.sqrt(SD_LOG[k]) if SD_LOG[k] > 0 else 1.0
        z[k] = (xlog - MEAN_LOG[k]) / denom
    return z

def predict_proba_from_norm(df_norm: pd.DataFrame) -> np.ndarray:
    X = df_norm[FEATURES].astype(float).values
    beta = np.array([COEFFS[f] for f in FEATURES])
    logit = BETA0 + X @ beta
    return 1 / (1 + np.exp(-logit))

def parse_num(s):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float –∏–ª–∏ None."""
    try:
        return float(str(s).replace(",", "."))
    except Exception:
        return None

# ===== –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É =====
st.markdown(
    "<h3 style='text-align:center'>–ú–æ–¥–µ–ª—å —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–µ—Ä–≤—ã–π —Ç—Ä–∏–º–µ—Å—Ç—Ä –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏) –≥–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–Ω–æ–≥–æ –¥–∏–∞–±–µ—Ç–∞</h3>",
    unsafe_allow_html=True
)
st.write("")

# ===== –í–≤–æ–¥ —Å—ã—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞) =====
st.markdown("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞):")

col1, col2 = st.columns(2)
with col1:
    tyrosine_str = st.text_input("–¢–∏—Ä–æ–∑–∏–Ω (–º–º–æ–ª—å/–º–æ–ª—å)", value="")
    pe_str = st.text_input("–§–æ—Å—Ñ–æ—ç—Ç–∞–Ω–æ–ª–∞–º–∏–Ω (–º–º–æ–ª—å/–º–æ–ª—å)", value="")
with col2:
    mh3_str = st.text_input("3-–º–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω (MH3) (–º–º–æ–ª—å/–º–æ–ª—å)", value="")
    ps_str = st.text_input("–§–æ—Å—Ñ–æ—Å–µ—Ä–∏–Ω (–º–º–æ–ª—å/–º–æ–ª—å)", value="")

calc = st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫")

if calc:
    tyrosine = parse_num(tyrosine_str)
    mh3 = parse_num(mh3_str)
    pe = parse_num(pe_str)
    ps = parse_num(ps_str)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    errors = []
    for name, val in [("–¢–∏—Ä–æ–∑–∏–Ω", tyrosine), ("3-–º–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω (MH3)", mh3),
                      ("–§–æ—Å—Ñ–æ—ç—Ç–∞–Ω–æ–ª–∞–º–∏–Ω", pe), ("–§–æ—Å—Ñ–æ—Å–µ—Ä–∏–Ω", ps)]:
        if val is None:
            errors.append(f"{name}: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ —Ç–æ—á–∫–∞).")
        elif val <= 0:
            errors.append(f"{name}: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0.")
    if errors:
        for e in errors:
            st.error(e)
    else:
        df_raw = pd.DataFrame([{
            "Tyrosine": tyrosine,
            "MH3": mh3,
            "Phosphoethanolamine": pe,
            "Phosphoserine": ps
        }])
        try:
            df_norm = normalize_raw_df(df_raw)
            p = float(predict_proba_from_norm(df_norm)[0])
            high_risk = p >= THRESH

            # –¶–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–µ–∑ —á–∏—Å–µ–ª
            if high_risk:
                st.markdown(
                    "<div style='background:#fdecea;color:#611a15;padding:14px;border-radius:10px;"
                    "text-align:center;font-size:20px;'><b>–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</b></div>",
                    unsafe_allow_html=True
                )
            else:
                st.markdown(
                    "<div style='background:#e8f5e9;color:#1b5e20;padding:14px;border-radius:10px;"
                    "text-align:center;font-size:20px;'><b>–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫</b></div>",
                    unsafe_allow_html=True
                )

        except Exception as e:
            st.error(str(e))

st.markdown("---")
with st.expander("–î–∏—Å–∫–ª–µ–π–º–µ—Ä"):
    st.markdown("""
- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∏–∑–¥–µ–ª–∏–µ–º.
- –ú–æ–¥–µ–ª—å: —Ä–µ–≥—É–ª—è—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (LASSO), –æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø–∏–ª–æ—Ç–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ n=10 (5 —Å–ª—É—á–∞–µ–≤ –ì–°–î, 5 –∫–æ–Ω—Ç—Ä–æ–ª–µ–π).
- –í–≤–æ–¥: —Å—ã—Ä—ã–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤ –º–æ—á–µ (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞); –≤–Ω—É—Ç—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞, —Å–æ–≤–ø–∞–¥–∞—é—â–∞—è —Å –æ–±—É—á–µ–Ω–∏–µ–º (log10 ‚Üí Pareto).
- –ü–æ—Ä–æ–≥ —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω (–∏–Ω–¥–µ–∫—Å –Æ–¥–µ–Ω–∞ –ø–æ LOO‚Äë–≤–∞–ª–∏–¥–∞—Ü–∏–∏). –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """)
