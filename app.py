import streamlit as st
import numpy as np
import pandas as pd
import io

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞ –ì–°–î", page_icon="üß™", layout="centered")

# === –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã LASSO‚Äë–º–æ–¥–µ–ª–∏ (–≤–∞—à–∏) ===
BETA0 = 0.0
COEFFS = {
    "Tyrosine": 0.1279647860222218,
    "MH3": 0.8913890705856571,             # 3‚Äë–º–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω
    "Phosphoethanolamine": -0.8390359958954429,
    "Phosphoserine": -1.1553144548078098
}
THRESH = 0.382  # –ø–æ—Ä–æ–≥ –Æ–¥–µ–Ω–∞ –ø–æ LOO
FEATURES = list(COEFFS.keys())

# === –°—ã—Ä—ã–µ TRAIN‚Äë–¥–∞–Ω–Ω—ã–µ (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞) –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ ===
TRAIN_RAW = {
    "Tyrosine": [45.31, 23.43, 15.03, 20.80, 19.32, 9.58, 12.33, 10.53, 10.17, 14.52],
    "MH3": [46.08, 35.35, 39.78, 15.54, 36.53, 11.93, 10.46, 15.63, 16.70, 11.75],
    "Phosphoethanolamine": [1.08, 0.55, 1.26, 1.09, 0.69, 2.93, 1.91, 1.91, 1.88, 2.20],
    "Phosphoserine": [1.68, 2.12, 0.67, 0.53, 0.35, 8.00, 3.78, 3.59, 1.80, 2.52]
}

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: log10 ‚Üí Pareto ((x ‚àí mean_log10)/sqrt(sd_log10)) ===
MEAN_LOG, SD_LOG = {}, {}
for k, arr in TRAIN_RAW.items():
    x = np.array(arr, dtype=float)
    xlog = np.log10(x)
    MEAN_LOG[k] = float(np.mean(xlog))
    SD_LOG[k] = float(np.std(xlog, ddof=1))  # sample SD (ddof=1)

def normalize_raw_df(df_raw: pd.DataFrame) -> pd.DataFrame:
    """–°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–º–æ–ª—å/–º–æ–ª—å) ‚Üí log10 ‚Üí Pareto —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ train."""
    z = pd.DataFrame(index=df_raw.index)
    for k in FEATURES:
        if k not in df_raw.columns:
            raise ValueError(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞: {k}")
        v = df_raw[k].astype(float)
        if (v <= 0).any():
            raise ValueError(f"{k}: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0 (–¥–ª—è log10)")
        xlog = np.log10(v)
        denom = np.sqrt(SD_LOG[k]) if SD_LOG[k] > 0 else 1.0
        z[k] = (xlog - MEAN_LOG[k]) / denom
    return z

def predict_proba_from_norm(df_norm: pd.DataFrame) -> np.ndarray:
    """–°—á–∏—Ç–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º."""
    missing = [c for c in FEATURES if c not in df_norm.columns]
    if missing:
        raise ValueError(f"–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing}")
    X = df_norm[FEATURES].astype(float).values
    beta = np.array([COEFFS[f] for f in FEATURES])
    logit = BETA0 + X @ beta
    return 1 / (1 + np.exp(-logit))

st.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞ –ì–°–î (–ø–∏–ª–æ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å)")
st.caption("LASSO‚Äë–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å—ã—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞) –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö (log10 + Pareto).")

tabs = st.tabs([
    "–û–¥–∏–Ω –ø–∞—Ü–∏–µ–Ω—Ç (RAW)",
    "–ü–∞–∫–µ—Ç (RAW CSV)",
    "–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ",
    "–®–∞–±–ª–æ–Ω—ã CSV",
    "QR‚Äë–∫–æ–¥",
    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏"
])

# --- –û–¥–∏–Ω –ø–∞—Ü–∏–µ–Ω—Ç: RAW ---
with tabs[0]:
    st.subheader("–û–¥–∏–Ω –ø–∞—Ü–∏–µ–Ω—Ç ‚Äî –≤–≤–æ–¥ —Å—ã—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞)")
    c1, c2 = st.columns(2)
    with c1:
        tyrosine = st.number_input("Tyrosine (–º–º–æ–ª—å/–º–æ–ª—å)", min_value=0.0001, value=10.0, step=0.01, format="%.4f")
        pe = st.number_input("Phosphoethanolamine (–º–º–æ–ª—å/–º–æ–ª—å)", min_value=0.0001, value=1.00, step=0.01, format="%.4f")
    with c2:
        mh3 = st.number_input("MH3 / 3‚Äë–º–µ—Ç–∏–ª–≥–∏—Å—Ç–∏–¥–∏–Ω (–º–º–æ–ª—å/–º–æ–ª—å)", min_value=0.0001, value=12.0, step=0.01, format="%.4f")
        ps = st.number_input("Phosphoserine (–º–º–æ–ª—å/–º–æ–ª—å)", min_value=0.0001, value=2.00, step=0.01, format="%.4f")

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å (RAW)"):
        df_raw = pd.DataFrame([{
            "Tyrosine": tyrosine,
            "MH3": mh3,
            "Phosphoethanolamine": pe,
            "Phosphoserine": ps
        }])
        try:
            df_norm = normalize_raw_df(df_raw)
            p = float(predict_proba_from_norm(df_norm)[0])
            label = "–ì–°–î" if p >= THRESH else "–ö–æ–Ω—Ç—Ä–æ–ª—å"
            st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ì–°–î", f"{p:.3f}")
            st.write(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ {THRESH:.3f}: **{label}**")
            with st.expander("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (log10 + Pareto)"):
                st.dataframe(df_norm)
        except Exception as e:
            st.error(str(e))

# --- –ü–∞–∫–µ—Ç: RAW CSV ---
def read_flexible_csv(uploaded):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏/–¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏."""
    try:
        uploaded.seek(0)
        return pd.read_csv(uploaded)
    except Exception:
        try:
            uploaded.seek(0)
            return pd.read_csv(uploaded, sep=";")
        except Exception:
            uploaded.seek(0)
            return pd.read_csv(uploaded, sep=";", decimal=",")

with tabs[1]:
    st.subheader("–ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ ‚Äî CSV c —Å—ã—Ä—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–º–º–æ–ª—å/–º–æ–ª—å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞)")
    st.write("–¢—Ä–µ–±—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: Tyrosine, MH3, Phosphoethanolamine, Phosphoserine")
    file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV", type=["csv"])
    if file is not None:
        try:
            df_raw = read_flexible_csv(file)
            df_norm = normalize_raw_df(df_raw)
            probs = predict_proba_from_norm(df_norm)
            out = df_raw.copy()
            out["P_GDM"] = np.round(probs, 4)
            out["Class_at_threshold"] = np.where(out["P_GDM"] >= THRESH, "GDM", "Control")
            st.dataframe(out, use_container_width=True)
            st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
                               out.to_csv(index=False).encode("utf-8"),
                               "gdm_predictions.csv", "text/csv")
        except Exception as e:
            st.error(str(e))

# --- –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ ---
with tabs[2]:
    st.subheader("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (log10 + Pareto)")
    c1, c2 = st.columns(2)
    with c1:
        tyrosine_n = st.number_input("Tyrosine (–Ω–æ—Ä–º.)", value=0.0, step=0.01, format="%.3f")
        pe_n = st.number_input("Phosphoethanolamine (–Ω–æ—Ä–º.)", value=0.0, step=0.01, format="%.3f")
    with c2:
        mh3_n = st.number_input("MH3 (–Ω–æ—Ä–º.)", value=0.0, step=0.01, format="%.3f")
        ps_n = st.number_input("Phosphoserine (–Ω–æ—Ä–º.)", value=0.0, step=0.01, format="%.3f")
    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å (–Ω–æ—Ä–º.)"):
        df_norm = pd.DataFrame([{
            "Tyrosine": tyrosine_n,
            "MH3": mh3_n,
            "Phosphoethanolamine": pe_n,
            "Phosphoserine": ps_n
        }])
        p = float(predict_proba_from_norm(df_norm)[0])
        label = "–ì–°–î" if p >= THRESH else "–ö–æ–Ω—Ç—Ä–æ–ª—å"
        st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ì–°–î", f"{p:.3f}")
        st.write(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ {THRESH:.3f}: **{label}**")

# --- –®–∞–±–ª–æ–Ω—ã CSV ---
with tabs[3]:
    st.subheader("–®–∞–±–ª–æ–Ω—ã CSV")
    raw_tmpl = pd.DataFrame(columns=FEATURES)
    st.download_button("–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω RAW (–º–º–æ–ª—å/–º–æ–ª—å)",
                       raw_tmpl.to_csv(index=False).encode("utf-8"),
                       "template_raw.csv", "text/csv")
    norm_tmpl = pd.DataFrame(columns=FEATURES)
    st.download_button("–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
                       norm_tmpl.to_csv(index=False).encode("utf-8"),
                       "template_normalized.csv", "text/csv")
    st.caption("–ï—Å–ª–∏ CSV –∏–∑ Excel —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ - –∑–∞–ø—è—Ç–∞—è) –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–∫ –µ—Å—Ç—å; –ø–∞—Ä—Å–µ—Ä –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–≥–∞–¥–∞—Ç—å—Å—è.")

# --- QR‚Äë–∫–æ–¥ ---
with tabs[4]:
    st.subheader("QR‚Äë–∫–æ–¥ –Ω–∞ —Å—Å—ã–ª–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    url = st.text_input("–í—Å—Ç–∞–≤—å—Ç–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è (https://‚Ä¶streamlit.app)")
    if url:
        try:
            import qrcode
            img = qrcode.make(url)
            buf = io.BytesIO()
            img.save(buf, format="PNG")
            st.image(buf.getvalue(), caption="QR‚Äë–∫–æ–¥")
            st.download_button("–°–∫–∞—á–∞—Ç—å QR (PNG)", buf.getvalue(), "qr_gdm_calculator.png", "image/png")
        except Exception:
            st.info("–ï—Å–ª–∏ QR –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ requirements.txt (qrcode[pil]).")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
with tabs[5]:
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö 10 –æ–±—Ä–∞–∑—Ü–∞—Ö)")
    rows = []
    for k in FEATURES:
        rows.append([k, MEAN_LOG[k], SD_LOG[k]])
    st.dataframe(pd.DataFrame(rows, columns=["–ú–∞—Ä–∫–µ—Ä", "mean_log10", "sd_log10"]), use_container_width=True)

st.markdown("---")
with st.expander("–î–∏—Å–∫–ª–µ–π–º–µ—Ä"):
    st.markdown("""
- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∏–∑–¥–µ–ª–∏–µ–º.
- RAW‚Äë–≤–≤–æ–¥: –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞, —Å–æ–≤–ø–∞–¥–∞—é—â–∞—è —Å –æ–±—É—á–µ–Ω–∏–µ–º (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ log10, Pareto‚Äë–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ).
- –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ n=10 (5/5); –º–µ—Ç—Ä–∏–∫–∏ ‚Äî –ø–∏–ª–æ—Ç–Ω—ã–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.
    """)
